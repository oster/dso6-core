package fr.loria.ecoo.so6.engine.tf.xml.test;

import java.io.File;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.List;

import junit.framework.TestCase;

import org.dom4j.Document;
import org.dom4j.Element;
import org.dom4j.Node;
import org.dom4j.dtd.AttributeDecl;
import org.dom4j.dtd.ElementDecl;
import org.dom4j.dtd.InternalEntityDecl;
import org.dom4j.tree.DefaultAttribute;
import org.dom4j.tree.DefaultComment;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.DefaultDocumentType;
import org.dom4j.tree.DefaultElement;
import org.dom4j.tree.DefaultNamespace;

import xml.util.XmlUtil2;
import fr.loria.ecoo.so6.WsConnection;
import fr.loria.ecoo.so6.engine.util.FileUtils;
import fr.loria.ecoo.so6.test.util.TestUtil;

/**
 * @author tani
 */
public class InsertNameSpaceTest extends TestCase {

	private String delta;
	private String dir;

	private String dir1;
	private String dir2;

	private WsConnection ws1;
	private WsConnection ws2;

	private String xmlFilePath1;
	private String xmlFilePath2;
	/**
	 * Constructor for NameSpaceTest.
	 * @param arg0
	 */
	public InsertNameSpaceTest(String arg0) {
		super(arg0);
	}

	protected void setUp() throws Exception {
		dir = FileUtils.createTmpDir().getPath();
		WsConnection[] ws = TestUtil.createWorkspace(dir, 2, true);

		ws1 = ws[0];
		ws2 = ws[1];
		dir1 = ws1.getPath();
		dir2 = ws2.getPath();

		xmlFilePath1 = dir1 + File.separator + "test.xml";
		xmlFilePath2 = dir2 + File.separator + "test.xml";

		delta = dir + File.separator + "delta.xml";

		XmlUtil2.createXmlFile("root", xmlFilePath1);
		//		XmlUtil2.insertNode(xmlFilePath1,"0:0",Node.ELEMENT_NODE,"libresource");

		ws1.updateAndCommit();
		ws2.updateAndCommit();
	}

	protected void tearDown() throws Exception {
		System.out.println(dir);
	}

	public void testInsertNameSpace() throws Exception {
		assertTrue(dir, FileUtils.compareDir(dir1, dir2));

		DefaultElement a = new DefaultElement("a");
		XmlUtil2.insertNode(xmlFilePath1, "0:0", a);

		ws1.updateAndCommit();
		ws2.updateAndCommit();

		assertTrue(dir, FileUtils.compareDir(dir1, dir2));

		DefaultNamespace ns = new DefaultNamespace("example", "http://example.fr");
		XmlUtil2.insertNode(xmlFilePath1, "0:0:0", ns);

		ws1.updateAndCommit();
		ws2.updateAndCommit();

		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
	}

	public void testInsertNameSpaceOnRoot() throws Exception {
		assertTrue(dir, FileUtils.compareDir(dir1, dir2));

		DefaultNamespace ns = new DefaultNamespace("test", "http://test.fr");
		XmlUtil2.insertNode(xmlFilePath1, "0:0", ns);

		ws1.updateAndCommit();
		ws2.updateAndCommit();

		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
	}

	public void testInsertNameSpaceAndCommentBeforeRoot() throws Exception {
		assertTrue(dir, FileUtils.compareDir(dir1, dir2));

		DefaultNamespace ns = new DefaultNamespace("test", "http://test.fr");
		XmlUtil2.insertNode(xmlFilePath1, "0:0:0", ns);
		XmlUtil2.insertNode(xmlFilePath1, "0", Node.COMMENT_NODE, "This is a test");

		ws1.updateAndCommit();
		ws2.updateAndCommit();

		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
	}

	public void testInsertNameSpaceAndCommentAfterRoot() throws Exception {
		assertTrue(dir, FileUtils.compareDir(dir1, dir2));

		DefaultComment c = new DefaultComment("This is a test");
		XmlUtil2.insertNode(xmlFilePath1, "1", c);

		DefaultNamespace ns = new DefaultNamespace("test", "http://test.fr");
		XmlUtil2.insertNode(xmlFilePath1, "0:0:0", ns);

		ws1.updateAndCommit();
		ws2.updateAndCommit();

		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
	}

	public void testInsertNameSpaceToElement() throws Exception {
		assertTrue(dir, FileUtils.compareDir(dir1, dir2));

		XmlUtil2.insertNode(xmlFilePath1, "0:0", Node.ELEMENT_NODE, "libresource");
		XmlUtil2.insertNode(xmlFilePath1, "0:0:0", Node.ELEMENT_NODE, "courgette");
		XmlUtil2.insertNode(xmlFilePath1, "0:0:1", Node.ELEMENT_NODE, "potiron");
		XmlUtil2.insertNode(xmlFilePath1, "0:0:2", Node.ELEMENT_NODE, "citrouille");

		DefaultNamespace courgette = new DefaultNamespace("courgette", "http://courgette.loria.fr");
		DefaultNamespace potiron = new DefaultNamespace("potiron", "http://potiron.loria.fr");
		DefaultNamespace citrouille = new DefaultNamespace("citrouille", "http://citrouile.loria.fr");

		ws1.updateAndCommit();
		ws2.updateAndCommit();

		assertTrue("The dir1 <>dir2", FileUtils.compareDir(dir1, dir2));

		XmlUtil2.insertNode(xmlFilePath1, "0:0:0:0", courgette);
		XmlUtil2.insertNode(xmlFilePath1, "0:0:1:0", potiron);
		XmlUtil2.insertNode(xmlFilePath1, "0:0:2:0", citrouille);
		XmlUtil2.insertNode(xmlFilePath1, "0:0:0", Node.COMMENT_NODE, "test");

		ws1.updateAndCommit();
		ws2.updateAndCommit();

		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
	}

	public void testInsertNameSpaceWtihDocumentType() throws Exception {
		assertTrue(dir, FileUtils.compareDir(dir1, dir2));

		DefaultDocumentType dtd = new DefaultDocumentType("root", "test/test.dtd");
		Document doc = XmlUtil2.getDocument(xmlFilePath1);
		doc.setDocType(dtd);
		DefaultNamespace ns = new DefaultNamespace("test", "http://test.fr");
		Element root = doc.getRootElement();
		DefaultElement elem = new DefaultElement("test");
		root.add(elem);
		XmlUtil2.save(doc, xmlFilePath1);

		ws1.updateAndCommit();
		ws2.updateAndCommit();

		assertTrue(dir, FileUtils.compareDir(dir1, dir2));

		elem.add(ns);
		XmlUtil2.save(doc, xmlFilePath1);

		ws1.updateAndCommit();
		ws2.updateAndCommit();

		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
	}

	public void testInsertNameSpaceGoodURI() throws Exception {
		assertTrue(dir, FileUtils.compareDir(dir1, dir2));

		Document doc = XmlUtil2.getDocument(xmlFilePath1);
		DefaultDocumentType dtd = new DefaultDocumentType("foo", null);
		ElementDecl elemDecl = new ElementDecl("foo", "ANY");
		AttributeDecl attrDecl = new AttributeDecl("foo", "xmlns", "CDATA", "#IMPLIED", null);
		ArrayList list = new ArrayList();
		list.add(elemDecl);
		list.add(attrDecl);
		dtd.setInternalDeclarations(list);
		doc.setDocType(dtd);
		Element foo = doc.getRootElement();
		DefaultNamespace ns = new DefaultNamespace("foo", "http://example.org/namespace");

		XmlUtil2.save(doc, xmlFilePath1);
		XmlUtil2.renameRoot(xmlFilePath1, "foo");

		/*
		 * <?xml version="1.0"?>
		<!-- Namespace name test: a perfectly good http URI -->
		<!DOCTYPE foo [
		<!ELEMENT foo ANY>
		<!ATTLIST foo xmlns CDATA #IMPLIED>
		]>
		<foo xmlns="http://example.org/namespace"/>
		 */

		ws1.updateAndCommit();
		ws2.updateAndCommit();

		assertTrue(dir, FileUtils.compareDir(dir1, dir2));

		foo.add(ns);
		XmlUtil2.save(doc, xmlFilePath1);
		XmlUtil2.renameRoot(xmlFilePath1, "foo");

		ws1.updateAndCommit();
		ws2.updateAndCommit();

		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
	}

	public void testInsertNameSpaceWithAttribute() throws Exception {
		assertTrue(dir, FileUtils.compareDir(dir1, dir2));

		DefaultElement elem = new DefaultElement("test");
		DefaultAttribute attr = new DefaultAttribute("number", "test1");
		DefaultNamespace ns = new DefaultNamespace("junit", "http://www.junit.org");

		elem.add(attr);
		XmlUtil2.insertNode(xmlFilePath1, "0:0", elem);

		ws1.updateAndCommit();
		ws2.updateAndCommit();

		assertTrue(dir, FileUtils.compareDir(dir1, dir2));

		XmlUtil2.insertNode(xmlFilePath1, "0:0:0", ns);

		ws1.updateAndCommit();
		ws2.updateAndCommit();

		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
	}

	public void testInsertAttributeBeforeNamespace() throws Exception {
		assertTrue(dir, FileUtils.compareDir(dir1, dir2));

		String c = "<?xml version=\"1.0\"?>\n<root><test t=\"test1\" xmlns:test=\"http://test.fr\"/></root>";
		FileOutputStream fos = new FileOutputStream(xmlFilePath1);
		byte[] buffer = c.getBytes();

		fos.write(buffer);
		fos.close();

		ws1.updateAndCommit();
		ws2.updateAndCommit();

		assertTrue(dir, FileUtils.compareXmlFile(xmlFilePath1, xmlFilePath2, delta));
	}

	public void testInsertSeveralNameSpace() throws Exception {
		assertTrue(dir, FileUtils.compareDir(dir1, dir2));

		DefaultNamespace ns1 = new DefaultNamespace("test1", "http://test1.fr");
		DefaultNamespace ns2 = new DefaultNamespace("test2", "http://test2.fr");
		DefaultNamespace ns3 = new DefaultNamespace("test3", "http://test3.fr");
		XmlUtil2.insertNode(xmlFilePath1, "0:0", ns3);
		XmlUtil2.insertNode(xmlFilePath1, "0:0", ns2);
		XmlUtil2.insertNode(xmlFilePath1, "0:0", ns1);

		ws1.updateAndCommit();
		ws2.updateAndCommit();

		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
	}

	public void testInsertSeveralNamespaceOnElement() throws Exception {
		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
		DefaultElement elem = new DefaultElement("testhsdgfsdhgf");
		DefaultNamespace ns1 = new DefaultNamespace("test", "http://test1.fr");
		DefaultNamespace ns2 = new DefaultNamespace("test2", "http://test2.fr");

		elem.add(ns1);
		elem.add(ns2);

		XmlUtil2.insertNode(xmlFilePath1, "0:0", elem);
		XmlUtil2.insertNode(xmlFilePath1, "0:0", ns1);
		XmlUtil2.insertNode(xmlFilePath1, "0:0", ns2);
		ws1.updateAndCommit();
		ws2.updateAndCommit();

		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
	}

	public void kotestInsertNamespaceWithDifferentCapitalization() throws Exception {
		/*
		 * XMLTest Suite
		 * path xmlconf/eduni/namespaces/1.0/007.xml
		 */
		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
		/*
		 * <?xml version="1.0"?>
		<!-- Namespace inequality test: different capitalization -->
		<!DOCTYPE foo [
		<!ELEMENT foo ANY>
		<!ATTLIST foo xmlns:a CDATA #IMPLIED
		      xmlns:b CDATA #IMPLIED
		      xmlns:c CDATA #IMPLIED>
		<!ELEMENT bar ANY>
		<!ATTLIST bar a:attr CDATA #IMPLIED
		      b:attr CDATA #IMPLIED
		      c:attr CDATA #IMPLIED>
		]>
		<foo xmlns:a="http://example.org/wine"
			  xmlns:b="http://Example.org/wine"
		  xmlns:c="http://example.org/Wine">
		
		<bar a:attr="1" b:attr="2" c:attr="3"/>
		
		</foo>
		 */

		Document doc = XmlUtil2.getDocument(xmlFilePath1);
		DefaultComment comment = new DefaultComment("Nampesace inequality test : different capitalization");
		XmlUtil2.insertNode(xmlFilePath1, "0", comment);
		DefaultDocumentType dtd = new DefaultDocumentType("foo", null);
		ElementDecl elemDecl1 = new ElementDecl("foo", "ANY");
		ElementDecl elemDecl2 = new ElementDecl("bar", "ANY");
		AttributeDecl attrDecl1 = new AttributeDecl("foo", "xmlns:a", "CDATA", "#IMPLIED", null);
		AttributeDecl attrDecl2 = new AttributeDecl("foo", "xmlns:b", "CDATA", "#IMPLIED", null);
		AttributeDecl attrDecl3 = new AttributeDecl("foo", "xmlns:c", "CDATA", "#IMPLIED", null);

		AttributeDecl attrDecl4 = new AttributeDecl("bar", "a:attr", "CDATA", "#IMPLIED", null);
		AttributeDecl attrDecl5 = new AttributeDecl("bar", "b:attr", "CDATA", "#IMPLIED", null);
		AttributeDecl attrDecl6 = new AttributeDecl("bar", "c:attr", "CDATA", "#IMPLIED", null);

		ArrayList list = new ArrayList();
		list.add(elemDecl1);
		list.add(attrDecl1);
		list.add(attrDecl2);
		list.add(attrDecl3);

		list.add(elemDecl2);
		list.add(attrDecl4);
		list.add(attrDecl5);
		list.add(attrDecl6);

		dtd.setInternalDeclarations(list);
		doc.setDocType(dtd);

		Element root = doc.getRootElement();
		DefaultNamespace ns1 = new DefaultNamespace("a", "http://example.org/wine");
		DefaultNamespace ns2 = new DefaultNamespace("b", "http://Example.org/wine");
		DefaultNamespace ns3 = new DefaultNamespace("c", "http://example.org/Wine");
		root.add(ns1);
		root.add(ns2);
		root.add(ns3);

		DefaultElement bar = new DefaultElement("bar");
		DefaultAttribute attr1 = new DefaultAttribute("a:attr", "1");
		DefaultAttribute attr2 = new DefaultAttribute("b:attr", "2");
		DefaultAttribute attr3 = new DefaultAttribute("c:attr", "3");
		bar.add(attr1);
		bar.add(attr2);
		bar.add(attr3);
		root.add(bar);

		XmlUtil2.save(doc, xmlFilePath1);
		XmlUtil2.renameRoot(xmlFilePath1, "foo");
		XmlUtil2.insertNode(xmlFilePath1, "0", comment);

		Document docr = XmlUtil2.getDocument(xmlFilePath1);

		ws1.updateAndCommit();
		//		ws2.updateAndCommit();

		//		assertTrue(dir,FileUtils.compareDir(dir1,dir2));
	}

	public void kotestInsertNamespaceNameTestA() throws Exception {
		/*
		 * XML Test Suite 
		 * path  xmlconf/eduni/namespace/1.0/002.xml
		 */
		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
		/*
		 * <?xml version="1.0"?>
			<!-- Namespace name test: a syntactically plausible URI with a 
			fictitious scheme -->
			<!DOCTYPE foo [
			<!ELEMENT foo ANY>
			<!ATTLIST foo xmlns CDATA #IMPLIED>
			]>
			<foo xmlns="zarquon://example.org/namespace"/>
		 */

		DefaultElement foo = new DefaultElement("foo");
		DefaultDocument doc = new DefaultDocument(foo);
		DefaultComment comment = new DefaultComment("Namespacename test : a syntactically plausible URI with a fictitious scheme");

		DefaultDocumentType dtd = new DefaultDocumentType("foo", null);
		ElementDecl elemDecl = new ElementDecl("foo", "ANY");
		AttributeDecl attrDecl = new AttributeDecl("foo", "xmlns", "CDATA", "#IMPLIED", null);
		ArrayList list = new ArrayList();
		list.add(elemDecl);
		list.add(attrDecl);
		dtd.setInternalDeclarations(list);

		doc.setDocType(dtd);
		DefaultNamespace ns = new DefaultNamespace(null, "zarquon://example.org/namespace");
		foo.add(ns);

		XmlUtil2.save(doc, xmlFilePath1);
		XmlUtil2.insertNode(xmlFilePath1, "0", comment);

		ws1.updateAndCommit();
		ws2.updateAndCommit();

		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
	}

	public void kotestInsertNamespaceNameTestB() throws Exception {
		/*
		 * XML Test Suite
		 * path xmlconf/eduni/namespace/1.0/003.xml
		 */
		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
		/*
		 * <?xml version="1.0"?>
			<!-- Namespace name test: a perfectly good http URI with a fragment -->
			<!DOCTYPE foo [
			<!ELEMENT foo ANY>
			<!ATTLIST foo xmlns CDATA #IMPLIED>
			]>
			<foo xmlns="http://example.org/namespace#apples"/>
		 */

		DefaultElement foo = new DefaultElement("foo");
		DefaultDocument doc = new DefaultDocument(foo);
		DefaultComment comment = new DefaultComment("Namespacename test : a perfectly good URI with fragment");

		DefaultDocumentType dtd = new DefaultDocumentType("foo", null);
		ElementDecl elemDecl = new ElementDecl("foo", "ANY");
		AttributeDecl attrDecl = new AttributeDecl("foo", "xmlns", "CDATA", "#IMPLIED", null);
		ArrayList list = new ArrayList();
		list.add(elemDecl);
		list.add(attrDecl);
		dtd.setInternalDeclarations(list);

		doc.setDocType(dtd);
		DefaultNamespace ns = new DefaultNamespace(null, "http://example.org/namespace#apples");
		foo.add(ns);

		XmlUtil2.save(doc, xmlFilePath1);
		XmlUtil2.insertNode(xmlFilePath1, "0", comment);

		ws1.updateAndCommit();
		ws2.updateAndCommit();

		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
	}

	public void kotestInsertNamespaceNameTestC() throws Exception {
		/*
		 * XML Test Suite 
		 * path xmlconf/eduni/namespace/1.0/001.xml
		 */
		assertTrue(dir, FileUtils.compareDir(dir1, dir2));

		/*
		 * <?xml version="1.0"?>
		<!-- Namespace name test: a perfectly good http URI -->
		<!DOCTYPE foo [
		<!ELEMENT foo ANY>
		<!ATTLIST foo xmlns CDATA #IMPLIED>
		]>
		<foo xmlns="http://example.org/namespace"/>
		 */
		DefaultElement foo = new DefaultElement("foo");
		DefaultDocument doc = new DefaultDocument(foo);
		DefaultComment comment = new DefaultComment("Namespacename test : a perfectly good http URI");

		DefaultDocumentType dtd = new DefaultDocumentType("foo", null);
		ElementDecl elemDecl = new ElementDecl("foo", "ANY");
		AttributeDecl attrDecl = new AttributeDecl("foo", "xmlns", "CDATA", "#IMPLIED", null);
		ArrayList list = new ArrayList();
		list.add(elemDecl);
		list.add(attrDecl);
		dtd.setInternalDeclarations(list);

		doc.setDocType(dtd);
		DefaultNamespace ns = new DefaultNamespace(null, "http://example.org/namespace");
		foo.add(ns);

		XmlUtil2.save(doc, xmlFilePath1);
		XmlUtil2.insertNode(xmlFilePath1, "0", comment);

		ws1.updateAndCommit();
		ws2.updateAndCommit();

		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
	}

	public void testInsertDefaultNamespace() throws Exception {
		/*
		 * XML Test Suite 
		 * path xmlconf/eduni/namespace/1.0/018.xml
		 */
		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
		DefaultElement foo = new DefaultElement("root");
		DefaultNamespace ns = new DefaultNamespace(null, "http://example.org/namespace");
		foo.add(ns);
		DefaultDocument doc = new DefaultDocument(foo);

		XmlUtil2.save(doc, xmlFilePath1);

		ws1.updateAndCommit();
		ws2.updateAndCommit();

		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
	}

	public void testInsertDefaultNamespaceUnbinding() throws Exception {
		/*
		 * XML Test Suite
		 * path xmlconf/eduni/namespace/1.0/021.xml
		 */
		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
		DefaultElement foo1 = new DefaultElement("foo");
		DefaultNamespace ns1 = new DefaultNamespace(null, "http://example.org/namespace");
		foo1.add(ns1);
		DefaultDocument doc = new DefaultDocument(foo1);
		DefaultElement foo2 = new DefaultElement("foo");
		DefaultNamespace ns2 = new DefaultNamespace(null, "");
		foo2.add(ns2);
		foo1.add(foo2);

		XmlUtil2.save(doc, xmlFilePath1);
		DefaultComment comment = new DefaultComment("Legal case: default namespace and unbinding");
		XmlUtil2.insertNode(xmlFilePath1, "0", comment);

		ws1.updateAndCommit();
		ws2.updateAndCommit();

		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
	}

	public void kotestInsertDifferentAttributesWithSameLocalName() throws Exception {
		/*
		 * XML Test Suite
		 * path xmlconf/eduni/namespace/1.0/037.xml
		 */
		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
		/*
		 * <?xml version="1.0"?>
		<!-- Attribute uniqueness: different attributes with same local name -->
		<foo xmlns:a="http://example.org/~wilbur"
		xmlns:b="http://example.org/~kipper">
		
		<bar a:attr="1" b:attr="2"/>
		
		</foo>
		 */
		DefaultElement foo = new DefaultElement("foo");
		DefaultNamespace a = new DefaultNamespace("a", "http://example.org/~wilbur");
		DefaultNamespace b = new DefaultNamespace("b", "http://example.org/~kipper");
		foo.add(a);
		foo.add(b);
		DefaultElement bar = new DefaultElement("bar");
		DefaultAttribute attrA = new DefaultAttribute("a:attr", "1");
		DefaultAttribute attrB = new DefaultAttribute("b:attr", "2");

		bar.add(attrA);
		bar.add(attrB);
		foo.add(bar);
		DefaultDocument doc = new DefaultDocument(foo);

		XmlUtil2.save(doc, xmlFilePath1);
		DefaultComment comment = new DefaultComment("Attribute uniqueness: differrent attributes with same local name");
		XmlUtil2.insertNode(xmlFilePath1, "0", comment);

		Document d = XmlUtil2.getDocument(xmlFilePath1);
		System.out.println(d.asXML());

		Element root = d.getRootElement();
		List l = root.content();
		for (int i = 0; i < l.size(); i++) {
			System.out.println("get " + l.get(i).toString());
		}

		ws1.updateAndCommit();
		ws2.updateAndCommit();

		//		  assertTrue(dir,FileUtils.compareDir(dir1,dir2));
	}

	public void testInsertNamespaceOnChildren() throws Exception {
		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
		DefaultElement root = new DefaultElement("root");
		DefaultNamespace ns1 = new DefaultNamespace("test", "http://test.fr");
		root.add(ns1);
		DefaultDocument doc = new DefaultDocument(root);
		DefaultElement a = new DefaultElement("a");
		DefaultNamespace ns2 = new DefaultNamespace("example", "http://example.org");
		a.add(ns2);
		root.add(a);

		XmlUtil2.save(doc, xmlFilePath1);

		ws1.updateAndCommit();
		ws2.updateAndCommit();

		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
	}

	public void kotestInsertPrefixedAndUnprefixedAttributes() throws Exception {
		/*
		 * XML Test Suite
		 * xmlconf/eduni/namespace/1.0/038.xml
		 */
		assertTrue(dir, FileUtils.compareDir(dir1, dir2));

		DefaultElement foo = new DefaultElement("foo");
		DefaultNamespace ns = new DefaultNamespace("a", "http://example.org/~wilbur");
		foo.add(ns);
		DefaultElement bar = new DefaultElement("bar");
		DefaultAttribute attr1 = new DefaultAttribute("a:attr", "1");
		DefaultAttribute attr2 = new DefaultAttribute("attr", "2");
		bar.add(attr1);
		bar.add(attr2);
		foo.add(bar);
		DefaultDocument doc = new DefaultDocument(foo);

		XmlUtil2.save(doc, xmlFilePath1);
		DefaultComment comment = new DefaultComment("Attribute uniqueness: prefixed and unprefixed with same local name");
		XmlUtil2.insertNode(xmlFilePath1, "0", comment);

		ws1.updateAndCommit();
		ws2.updateAndCommit();

		//		  assertTrue(dir,FileUtils.compareDir(dir1,dir2));
	}

	public void testInsertNamespaceWithColonInIDName() throws Exception {
		/*
		 * XML Test Suite
		 * xmlconf/eduni/namespace/1.0/046.xml
		 */
		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
		DefaultElement foo1 = new DefaultElement("foo");
		DefaultDocument doc = new DefaultDocument(foo1);
		DefaultDocumentType dtd = new DefaultDocumentType("foo", null);
		ElementDecl elemDecl = new ElementDecl("foo", "ANY");
		AttributeDecl attrDecl1 = new AttributeDecl("foo", "id", "ID", "#IMPLIED", null);
		AttributeDecl attrDecl2 = new AttributeDecl("foo", "ref", "IDREF", "#IMPLIED", null);

		ArrayList l = new ArrayList();
		l.add(elemDecl);
		l.add(attrDecl1);
		l.add(attrDecl2);
		dtd.setInternalDeclarations(l);

		doc.setDocType(dtd);

		DefaultAttribute attr1 = new DefaultAttribute("ref", "a:b");
		foo1.add(attr1);
		DefaultElement foo2 = new DefaultElement("foo");
		DefaultAttribute attr2 = new DefaultAttribute("id", "a:b");
		foo2.add(attr2);

		foo1.add(foo2);
		XmlUtil2.save(doc, xmlFilePath1);
		DefaultComment comment = new DefaultComment("Colon in ID attribute name");
		XmlUtil2.insertNode(xmlFilePath1, "0", comment);

		ws1.updateAndCommit();
		ws2.updateAndCommit();

		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
	}

	public void kotestInsertReservedNamespace() throws Exception {
		/*
		 * XML Test Suite
		 * path xmlconf/eduni/namespace/1.0/028.xml
		 */
		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
		DefaultElement foo = new DefaultElement("foo");
		DefaultNamespace ns = new DefaultNamespace("xml", "http://www.w3.org/XML/1998/namespace");
		foo.add(ns);
		DefaultDocument doc = new DefaultDocument(foo);

		XmlUtil2.save(doc, xmlFilePath1);
		DefaultComment comment = new DefaultComment("Reserved prefixes ans namespace: declaring the xml prefix correctly");
		XmlUtil2.insertNode(xmlFilePath1, "0", comment);

		ws1.updateAndCommit();
		ws2.updateAndCommit();

		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
	}

	public void testInsertReservedNamespaceBinding() throws Exception {
		/*
		 * XML Test Suite
		 * path xmlconf/eduni/namespace/1.0/034.xml
		 */
		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
		DefaultElement foo = new DefaultElement("foo");
		DefaultNamespace ns = new DefaultNamespace("xml2", "http://example/org/namespace");
		foo.add(ns);
		DefaultDocument doc = new DefaultDocument(foo);

		XmlUtil2.save(doc, xmlFilePath1);
		DefaultComment comment = new DefaultComment("Reserved prefixes and namespace: binding a reserved prefix");
		XmlUtil2.insertNode(xmlFilePath1, "0", comment);

		ws1.updateAndCommit();
		ws2.updateAndCommit();

		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
	}

	public void kotestInsertNamespaceOnPrefixedRootElement() throws Exception {
		/*
		 * XML Test Suite
		 * path xmlconf/eduni/namespace/1.0/019.xml
		 */
		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
		DefaultElement root = new DefaultElement("a:foo");
		DefaultNamespace ns = new DefaultNamespace("a", "http://example.org/namespace");
		root.add(ns);
		DefaultDocument doc = new DefaultDocument(root);

		XmlUtil2.save(doc, xmlFilePath1);
		DefaultComment comment = new DefaultComment("Legal case: prefixed element");
		XmlUtil2.insertNode(xmlFilePath1, "0", comment);

		//		Document d = XmlUtil2.getDocument(xmlFilePath1);
		//		Element r = d.getRootElement();
		//		System.out.println("root " + r.asXML());

		//		System.out.println("Name " + r.getName());
		//		System.out.println("QName " + r.getQualifiedName());

		ws1.updateAndCommit();
		ws2.updateAndCommit();

		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
	}

	public void kotestInsertNamespaceWithPrefixedAttribute() throws Exception {
		/*
		 * XML Test Suite 
		 * path xmlconf/eduni/namespace/1.0/020.xml
		 */
		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
		DefaultElement foo = new DefaultElement("foo");
		DefaultAttribute attr = new DefaultAttribute("a:attr", "1");
		DefaultNamespace ns = new DefaultNamespace("a", "http://example.org/namespace");
		foo.add(attr);
		foo.add(ns);
		DefaultDocument doc = new DefaultDocument(foo);

		XmlUtil2.save(doc, xmlFilePath1);
		DefaultComment comment = new DefaultComment("Legal case: preifexed attribute");
		XmlUtil2.insertNode(xmlFilePath1, "0", comment);

		ws1.updateAndCommit();
		ws2.updateAndCommit();

		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
	}

	public void testInsertNamespaceAndPrefixReserved() throws Exception {
		/*
		 * XML Test Suite
		 * path xmlconf/eduni/namespace/1.0/027.xml
		 */
		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
		DefaultElement foo = new DefaultElement("foo");
		DefaultAttribute attr = new DefaultAttribute("xml:lang", "en");
		foo.add(attr);
		DefaultDocument doc = new DefaultDocument(foo);

		XmlUtil2.save(doc, xmlFilePath1);
		DefaultComment comment = new DefaultComment("Reserved prefixes and namespace: using the xml prefix undeclared");
		XmlUtil2.insertNode(xmlFilePath1, "0", comment);

		ws1.updateAndCommit();
		ws2.updateAndCommit();

		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
	}

	public void kotestAttributeUniquenessA() throws Exception {
		/*
		 * XML Test Suite
		 * path xmlconf/eduni/namespace/1.0/038.xml
		 */
		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
		DefaultElement foo = new DefaultElement("foo");
		DefaultNamespace ns = new DefaultNamespace("a", "http://example.org/~wilbur");
		foo.add(ns);
		DefaultElement bar = new DefaultElement("bar");
		DefaultAttribute attr1 = new DefaultAttribute("a:attr", "1");
		DefaultAttribute attr2 = new DefaultAttribute("attr", "2");
		bar.add(attr1);
		bar.add(attr2);
		foo.add(bar);
		DefaultDocument doc = new DefaultDocument(foo);

		XmlUtil2.save(doc, xmlFilePath1);
		DefaultComment comment = new DefaultComment("Attribute uniqueness: prefixed and unprefixed attributes with same local name, with default namespace");

		ws1.updateAndCommit();
		ws2.updateAndCommit();

		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
	}

	public void kotestAttributeUniquenessB() throws Exception {
		/*
		 * XML Test Suite
		 * path xmlconf/eduni/namespace/1.0/040.xml
		 */
		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
		DefaultElement foo = new DefaultElement("foo");
		DefaultNamespace ns1 = new DefaultNamespace("a", "http://example.org/~wilbur");
		DefaultNamespace ns2 = new DefaultNamespace(null, "http://example.org/~wilbur");
		foo.add(ns1);
		foo.add(ns2);

		DefaultElement bar = new DefaultElement("bar");
		DefaultAttribute attr1 = new DefaultAttribute("a:attr", "1");
		DefaultAttribute attr2 = new DefaultAttribute("attr", "2");
		bar.add(attr1);
		bar.add(attr2);
		foo.add(bar);
		DefaultDocument doc = new DefaultDocument(foo);

		XmlUtil2.save(doc, xmlFilePath1);
		DefaultComment comment =
			new DefaultComment("Attribute uniqueness: prefixed and unprefixed attributes with same local name,with defualt namespace and element in default namespace");
		XmlUtil2.insertNode(xmlFilePath1, "0", comment);

		ws1.updateAndCommit();
		ws2.updateAndCommit();

		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
	}

	public void kotestColonInEntityName() throws Exception {
		/*
		 * XML Test Suite
		 * not well formed document
		 * path xmlconf/eduni/namespace/1.0/043.xml
		 */
		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
		DefaultElement foo = new DefaultElement("foo");
		DefaultDocument doc = new DefaultDocument(foo);
		DefaultDocumentType dtd = new DefaultDocumentType("foo", null);
		ElementDecl elemDecl = new ElementDecl("foo", "ANY");
		InternalEntityDecl ied = new InternalEntityDecl("a:b", "bogus");
		ArrayList list = new ArrayList();
		list.add(elemDecl);
		list.add(ied);
		dtd.setInternalDeclarations(list);
		doc.setDocType(dtd);

		XmlUtil2.save(doc, xmlFilePath1);
		DefaultComment comment = new DefaultComment("Colon in entity name");
		XmlUtil2.insertNode(xmlFilePath1, "0", comment);

		ws1.updateAndCommit();
		ws2.updateAndCommit();

		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
	}

	public void testInsertNamespaceWithSimpleQuote() throws Exception {
		assertTrue(dir, FileUtils.compareDir(dir1, dir2));

		String c =
			"<?xml version=\"1.0\"?>\n<root xmlns:example='http://example.org/namespace'><a xmlns:test='http://test.fr' xmlns:google='http://www.google.fr'/></root>";
		FileOutputStream fos = new FileOutputStream(xmlFilePath1);
		byte[] buffer = c.getBytes();
		fos.write(buffer);
		fos.close();

		ws1.updateAndCommit();
		ws2.updateAndCommit();

		assertTrue("The file1 <> file2", FileUtils.compareXmlFile(xmlFilePath1, xmlFilePath2, delta));
	}

	public void testInsertNamespaceWithSimpleQuoteContent() throws Exception {
		assertTrue(dir, FileUtils.compareDir(dir1, dir2));

		String c = "<?xml version=\"1.0\"?>\n<root xmlns:example=\"http://examp'''''le.org/n'a'm'e's'p'a'c'e\"/>";
		FileOutputStream fos = new FileOutputStream(xmlFilePath1);
		byte[] buffer = c.getBytes();
		fos.write(buffer);
		fos.close();

		ws1.updateAndCommit();
		ws2.updateAndCommit();

		assertTrue(dir, FileUtils.compareXmlFile(xmlFilePath1, xmlFilePath2, delta));
	}

	public void kotestInsertNamespaceOnPrefixedElement() throws Exception {
		assertTrue(dir, FileUtils.compareDir(dir1, dir2));

		Document doc = XmlUtil2.getDocument(xmlFilePath1);
		DefaultNamespace ns = new DefaultNamespace("a", "http://example.org/namespace");
		Element root = doc.getRootElement();
		root.add(ns);
		DefaultElement a = new DefaultElement("a:foo");
		root.add(a);

		XmlUtil2.save(doc, xmlFilePath1);

		ws1.updateAndCommit();
		ws2.updateAndCommit();

		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
	}

	public void kotestInsertNamespaceAttributeUniqueness() throws Exception {
		/*
		 * XML Test Suite
		 * path xmlconf/eduni/namespace/1.0/039.xml
		 */
		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
		/*
		 * <?xml version="1.0"?>
		<!-- Attribute uniqueness: prefixed and unprefixed attributes with same
		local name, with default namespace -->
		<foo xmlns:a="http://example.org/~wilbur"
		xmlns:b="http://example.org/~kipper"
		xmlns="http://example.org/~wilbur">
		
		<b:bar a:attr="1" attr="2"/>
		
		</foo>
		 */
		String c =
			"<?xml version=\"1.0\"?>\n<!-- Attribute uniqueness: prefixed and unprefixed attributes with same     local name, with default namespace -->\n\n<foo xmlns:a=\"http://example.org/~wilbur\"\n     xmlns:b=\"http://example.org/~kipper\"\n>\n<b:bar a:attr=\"1\" attr=\"2\"/>\n</foo>";
		FileOutputStream fos = new FileOutputStream(xmlFilePath1);
		byte[] buffer = c.getBytes();
		fos.write(buffer);
		fos.close();

		ws1.updateAndCommit();
		ws2.updateAndCommit();

		assertTrue(dir, FileUtils.compareDir(dir1, dir2));
	}
}
